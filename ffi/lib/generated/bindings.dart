// ignore_for_file: unused_element
// ignore_for_file: unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as ffi;

/// Dart bindings to Discord RPC client.
class DiscordRPC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DiscordRPC(ffi.DynamicLibrary dynamicLibrary, {String? applicationId})
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DiscordRPC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void Discord_Register(
    ffi.Pointer<ffi.Utf8> applicationId,
    ffi.Pointer<ffi.Utf8> command,
  ) {
    return _Discord_Register(
      applicationId,
      command,
    );
  }

  late final _Discord_Register_ptr =
      _lookup<ffi.NativeFunction<_c_Discord_Register>>('Discord_Register');
  late final _dart_Discord_Register _Discord_Register =
      _Discord_Register_ptr.asFunction<_dart_Discord_Register>();

  void Discord_RegisterSteamGame(
    ffi.Pointer<ffi.Utf8> applicationId,
    ffi.Pointer<ffi.Utf8> steamId,
  ) {
    return _Discord_RegisterSteamGame(
      applicationId,
      steamId,
    );
  }

  late final _Discord_RegisterSteamGame_ptr =
      _lookup<ffi.NativeFunction<_c_Discord_RegisterSteamGame>>(
          'Discord_RegisterSteamGame');
  late final _dart_Discord_RegisterSteamGame _Discord_RegisterSteamGame =
      _Discord_RegisterSteamGame_ptr.asFunction<
          _dart_Discord_RegisterSteamGame>();

  void Discord_Initialize(
    ffi.Pointer<ffi.Utf8> applicationId,
    ffi.Pointer<DiscordEventHandlers> handlers,
    int autoRegister,
    ffi.Pointer<ffi.Utf8> optionalSteamId,
  ) {
    return _Discord_Initialize(
      applicationId,
      handlers,
      autoRegister,
      optionalSteamId,
    );
  }

  late final _Discord_Initialize_ptr =
      _lookup<ffi.NativeFunction<_c_Discord_Initialize>>('Discord_Initialize');
  late final _dart_Discord_Initialize _Discord_Initialize =
      _Discord_Initialize_ptr.asFunction<_dart_Discord_Initialize>();

  void Discord_Shutdown() {
    return _Discord_Shutdown();
  }

  late final _Discord_Shutdown_ptr =
      _lookup<ffi.NativeFunction<_c_Discord_Shutdown>>('Discord_Shutdown');
  late final _dart_Discord_Shutdown _Discord_Shutdown =
      _Discord_Shutdown_ptr.asFunction<_dart_Discord_Shutdown>();

  void Discord_RunCallbacks() {
    return _Discord_RunCallbacks();
  }

  late final _Discord_RunCallbacks_ptr =
      _lookup<ffi.NativeFunction<_c_Discord_RunCallbacks>>(
          'Discord_RunCallbacks');
  late final _dart_Discord_RunCallbacks _Discord_RunCallbacks =
      _Discord_RunCallbacks_ptr.asFunction<_dart_Discord_RunCallbacks>();

  void Discord_UpdatePresence(
    ffi.Pointer<DiscordRichPresence> presence,
  ) {
    return _Discord_UpdatePresence(
      presence,
    );
  }

  late final _Discord_UpdatePresence_ptr =
      _lookup<ffi.NativeFunction<_c_Discord_UpdatePresence>>(
          'Discord_UpdatePresence');
  late final _dart_Discord_UpdatePresence _Discord_UpdatePresence =
      _Discord_UpdatePresence_ptr.asFunction<_dart_Discord_UpdatePresence>();

  void Discord_ClearPresence() {
    return _Discord_ClearPresence();
  }

  late final _Discord_ClearPresence_ptr =
      _lookup<ffi.NativeFunction<_c_Discord_ClearPresence>>(
          'Discord_ClearPresence');
  late final _dart_Discord_ClearPresence _Discord_ClearPresence =
      _Discord_ClearPresence_ptr.asFunction<_dart_Discord_ClearPresence>();

  void Discord_Respond(
    ffi.Pointer<ffi.Utf8> userid,
    int reply,
  ) {
    return _Discord_Respond(
      userid,
      reply,
    );
  }

  late final _Discord_Respond_ptr =
      _lookup<ffi.NativeFunction<_c_Discord_Respond>>('Discord_Respond');
  late final _dart_Discord_Respond _Discord_Respond =
      _Discord_Respond_ptr.asFunction<_dart_Discord_Respond>();

  void Discord_UpdateHandlers(
    ffi.Pointer<DiscordEventHandlers> handlers,
  ) {
    return _Discord_UpdateHandlers(
      handlers,
    );
  }

  late final _Discord_UpdateHandlers_ptr =
      _lookup<ffi.NativeFunction<_c_Discord_UpdateHandlers>>(
          'Discord_UpdateHandlers');
  late final _dart_Discord_UpdateHandlers _Discord_UpdateHandlers =
      _Discord_UpdateHandlers_ptr.asFunction<_dart_Discord_UpdateHandlers>();
}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

class DiscordRichPresence extends ffi.Struct {
  external ffi.Pointer<ffi.Utf8> state;

  external ffi.Pointer<ffi.Utf8> details;

  @ffi.Int64()
  external int startTimestamp;

  @ffi.Int64()
  external int endTimestamp;

  external ffi.Pointer<ffi.Utf8> largeImageKey;

  external ffi.Pointer<ffi.Utf8> largeImageText;

  external ffi.Pointer<ffi.Utf8> smallImageKey;

  external ffi.Pointer<ffi.Utf8> smallImageText;

  external ffi.Pointer<ffi.Utf8> partyId;

  @ffi.Int32()
  external int partySize;

  @ffi.Int32()
  external int partyMax;

  external ffi.Pointer<ffi.Utf8> matchSecret;

  external ffi.Pointer<ffi.Utf8> joinSecret;

  external ffi.Pointer<ffi.Utf8> spectateSecret;

  @ffi.Int8()
  external int instance;
}

class DiscordUser extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> userId;

  external ffi.Pointer<ffi.Int8> username;

  external ffi.Pointer<ffi.Int8> discriminator;

  external ffi.Pointer<ffi.Int8> avatar;
}

class DiscordEventHandlers extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> ready;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_2>> disconnected;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> errored;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_4>> joinGame;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_5>> spectateGame;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_6>> joinRequest;
}

typedef _c_Discord_Register = ffi.Void Function(
  ffi.Pointer<ffi.Utf8> applicationId,
  ffi.Pointer<ffi.Utf8> command,
);

typedef _dart_Discord_Register = void Function(
  ffi.Pointer<ffi.Utf8> applicationId,
  ffi.Pointer<ffi.Utf8> command,
);

typedef _c_Discord_RegisterSteamGame = ffi.Void Function(
  ffi.Pointer<ffi.Utf8> applicationId,
  ffi.Pointer<ffi.Utf8> steamId,
);

typedef _dart_Discord_RegisterSteamGame = void Function(
  ffi.Pointer<ffi.Utf8> applicationId,
  ffi.Pointer<ffi.Utf8> steamId,
);

typedef _c_Discord_Initialize = ffi.Void Function(
  ffi.Pointer<ffi.Utf8> applicationId,
  ffi.Pointer<DiscordEventHandlers> handlers,
  ffi.Int32 autoRegister,
  ffi.Pointer<ffi.Utf8> optionalSteamId,
);

typedef _dart_Discord_Initialize = void Function(
  ffi.Pointer<ffi.Utf8> applicationId,
  ffi.Pointer<DiscordEventHandlers> handlers,
  int autoRegister,
  ffi.Pointer<ffi.Utf8> optionalSteamId,
);

typedef _c_Discord_Shutdown = ffi.Void Function();

typedef _dart_Discord_Shutdown = void Function();

typedef _c_Discord_RunCallbacks = ffi.Void Function();

typedef _dart_Discord_RunCallbacks = void Function();

typedef _c_Discord_UpdatePresence = ffi.Void Function(
  ffi.Pointer<DiscordRichPresence> presence,
);

typedef _dart_Discord_UpdatePresence = void Function(
  ffi.Pointer<DiscordRichPresence> presence,
);

typedef _c_Discord_ClearPresence = ffi.Void Function();

typedef _dart_Discord_ClearPresence = void Function();

typedef _c_Discord_Respond = ffi.Void Function(
  ffi.Pointer<ffi.Utf8> userid,
  ffi.Int32 reply,
);

typedef _dart_Discord_Respond = void Function(
  ffi.Pointer<ffi.Utf8> userid,
  int reply,
);

typedef _c_Discord_UpdateHandlers = ffi.Void Function(
  ffi.Pointer<DiscordEventHandlers> handlers,
);

typedef _dart_Discord_UpdateHandlers = void Function(
  ffi.Pointer<DiscordEventHandlers> handlers,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<DiscordUser>,
);

typedef _typedefC_2 = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_4 = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_5 = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_6 = ffi.Void Function(
  ffi.Pointer<DiscordUser>,
);
