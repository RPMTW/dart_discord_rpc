// ignore_for_file: camel_case_types, non_constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings to Discord Game SDK client.
class DiscordClient {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DiscordClient(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DiscordClient.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int DiscordCreate(
    int version,
    ffi.Pointer<DiscordCreateParams> params,
    ffi.Pointer<ffi.Pointer<IDiscordCore>> result,
  ) {
    return _DiscordCreate(
      version,
      params,
      result,
    );
  }

  late final _DiscordCreate_ptr =
      _lookup<ffi.NativeFunction<_c_DiscordCreate>>('DiscordCreate');
  late final _dart_DiscordCreate _DiscordCreate =
      _DiscordCreate_ptr.asFunction<_dart_DiscordCreate>();

  void DiscordCreateParamsSetDefault(
    ffi.Pointer<DiscordCreateParams> params,
  ) {
    return _DiscordCreateParamsSetDefault(
      params,
    );
  }

  late final _DiscordCreateParamsSetDefault_ptr =
      _lookup<ffi.NativeFunction<_c_DiscordCreateParamsSetDefault>>(
          'DiscordCreateParamsSetDefault');
  late final _dart_DiscordCreateParamsSetDefault
      _DiscordCreateParamsSetDefault = _DiscordCreateParamsSetDefault_ptr
          .asFunction<_dart_DiscordCreateParamsSetDefault>();

  ffi.Pointer<ffi.Int8> __stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  late final ___stpcpy_ptr =
      _lookup<ffi.NativeFunction<_c___stpcpy>>('__stpcpy');
  late final _dart___stpcpy ___stpcpy =
      ___stpcpy_ptr.asFunction<_dart___stpcpy>();

  ffi.Pointer<ffi.Int8> __stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpy_ptr =
      _lookup<ffi.NativeFunction<_c___stpncpy>>('__stpncpy');
  late final _dart___stpncpy ___stpncpy =
      ___stpncpy_ptr.asFunction<_dart___stpncpy>();

  ffi.Pointer<ffi.Int8> __strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_r_ptr =
      _lookup<ffi.NativeFunction<_c___strtok_r>>('__strtok_r');
  late final _dart___strtok_r ___strtok_r =
      ___strtok_r_ptr.asFunction<_dart___strtok_r>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmp_ptr = _lookup<ffi.NativeFunction<_c_bcmp>>('bcmp');
  late final _dart_bcmp _bcmp = _bcmp_ptr.asFunction<_dart_bcmp>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopy_ptr = _lookup<ffi.NativeFunction<_c_bcopy>>('bcopy');
  late final _dart_bcopy _bcopy = _bcopy_ptr.asFunction<_dart_bcopy>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzero_ptr = _lookup<ffi.NativeFunction<_c_bzero>>('bzero');
  late final _dart_bzero _bzero = _bzero_ptr.asFunction<_dart_bzero>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzero_ptr =
      _lookup<ffi.NativeFunction<_c_explicit_bzero>>('explicit_bzero');
  late final _dart_explicit_bzero _explicit_bzero =
      _explicit_bzero_ptr.asFunction<_dart_explicit_bzero>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffs_ptr = _lookup<ffi.NativeFunction<_c_ffs>>('ffs');
  late final _dart_ffs _ffs = _ffs_ptr.asFunction<_dart_ffs>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffsl_ptr = _lookup<ffi.NativeFunction<_c_ffsl>>('ffsl');
  late final _dart_ffsl _ffsl = _ffsl_ptr.asFunction<_dart_ffsl>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsll_ptr = _lookup<ffi.NativeFunction<_c_ffsll>>('ffsll');
  late final _dart_ffsll _ffsll = _ffsll_ptr.asFunction<_dart_ffsll>();

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _index_ptr = _lookup<ffi.NativeFunction<_c_index>>('index');
  late final _dart_index _index = _index_ptr.asFunction<_dart_index>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy_ptr = _lookup<ffi.NativeFunction<_c_memccpy>>('memccpy');
  late final _dart_memccpy _memccpy = _memccpy_ptr.asFunction<_dart_memccpy>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr_ptr = _lookup<ffi.NativeFunction<_c_memchr>>('memchr');
  late final _dart_memchr _memchr = _memchr_ptr.asFunction<_dart_memchr>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp_ptr = _lookup<ffi.NativeFunction<_c_memcmp>>('memcmp');
  late final _dart_memcmp _memcmp = _memcmp_ptr.asFunction<_dart_memcmp>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpy_ptr = _lookup<ffi.NativeFunction<_c_memcpy>>('memcpy');
  late final _dart_memcpy _memcpy = _memcpy_ptr.asFunction<_dart_memcpy>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmove_ptr = _lookup<ffi.NativeFunction<_c_memmove>>('memmove');
  late final _dart_memmove _memmove = _memmove_ptr.asFunction<_dart_memmove>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memset_ptr = _lookup<ffi.NativeFunction<_c_memset>>('memset');
  late final _dart_memset _memset = _memset_ptr.asFunction<_dart_memset>();

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindex_ptr = _lookup<ffi.NativeFunction<_c_rindex>>('rindex');
  late final _dart_rindex _rindex = _rindex_ptr.asFunction<_dart_rindex>();

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpy_ptr = _lookup<ffi.NativeFunction<_c_stpcpy>>('stpcpy');
  late final _dart_stpcpy _stpcpy = _stpcpy_ptr.asFunction<_dart_stpcpy>();

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpy_ptr = _lookup<ffi.NativeFunction<_c_stpncpy>>('stpncpy');
  late final _dart_stpncpy _stpncpy = _stpncpy_ptr.asFunction<_dart_stpncpy>();

  int strcasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmp_ptr =
      _lookup<ffi.NativeFunction<_c_strcasecmp>>('strcasecmp');
  late final _dart_strcasecmp _strcasecmp =
      _strcasecmp_ptr.asFunction<_dart_strcasecmp>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_l_ptr =
      _lookup<ffi.NativeFunction<_c_strcasecmp_l>>('strcasecmp_l');
  late final _dart_strcasecmp_l _strcasecmp_l =
      _strcasecmp_l_ptr.asFunction<_dart_strcasecmp_l>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcat_ptr = _lookup<ffi.NativeFunction<_c_strcat>>('strcat');
  late final _dart_strcat _strcat = _strcat_ptr.asFunction<_dart_strcat>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchr_ptr = _lookup<ffi.NativeFunction<_c_strchr>>('strchr');
  late final _dart_strchr _strchr = _strchr_ptr.asFunction<_dart_strchr>();

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmp_ptr = _lookup<ffi.NativeFunction<_c_strcmp>>('strcmp');
  late final _dart_strcmp _strcmp = _strcmp_ptr.asFunction<_dart_strcmp>();

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcoll_ptr = _lookup<ffi.NativeFunction<_c_strcoll>>('strcoll');
  late final _dart_strcoll _strcoll = _strcoll_ptr.asFunction<_dart_strcoll>();

  int strcoll_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    ffi.Pointer<__locale_struct> __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_l_ptr =
      _lookup<ffi.NativeFunction<_c_strcoll_l>>('strcoll_l');
  late final _dart_strcoll_l _strcoll_l =
      _strcoll_l_ptr.asFunction<_dart_strcoll_l>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpy_ptr = _lookup<ffi.NativeFunction<_c_strcpy>>('strcpy');
  late final _dart_strcpy _strcpy = _strcpy_ptr.asFunction<_dart_strcpy>();

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspn_ptr = _lookup<ffi.NativeFunction<_c_strcspn>>('strcspn');
  late final _dart_strcspn _strcspn = _strcspn_ptr.asFunction<_dart_strcspn>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdup_ptr = _lookup<ffi.NativeFunction<_c_strdup>>('strdup');
  late final _dart_strdup _strdup = _strdup_ptr.asFunction<_dart_strdup>();

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerror_ptr =
      _lookup<ffi.NativeFunction<_c_strerror>>('strerror');
  late final _dart_strerror _strerror =
      _strerror_ptr.asFunction<_dart_strerror>();

  ffi.Pointer<ffi.Int8> strerror_l(
    int __errnum,
    ffi.Pointer<__locale_struct> __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_l_ptr =
      _lookup<ffi.NativeFunction<_c_strerror_l>>('strerror_l');
  late final _dart_strerror_l _strerror_l =
      _strerror_l_ptr.asFunction<_dart_strerror_l>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_r_ptr =
      _lookup<ffi.NativeFunction<_c_strerror_r>>('strerror_r');
  late final _dart_strerror_r _strerror_r =
      _strerror_r_ptr.asFunction<_dart_strerror_r>();

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlen_ptr = _lookup<ffi.NativeFunction<_c_strlen>>('strlen');
  late final _dart_strlen _strlen = _strlen_ptr.asFunction<_dart_strlen>();

  int strncasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmp_ptr =
      _lookup<ffi.NativeFunction<_c_strncasecmp>>('strncasecmp');
  late final _dart_strncasecmp _strncasecmp =
      _strncasecmp_ptr.asFunction<_dart_strncasecmp>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_l_ptr =
      _lookup<ffi.NativeFunction<_c_strncasecmp_l>>('strncasecmp_l');
  late final _dart_strncasecmp_l _strncasecmp_l =
      _strncasecmp_l_ptr.asFunction<_dart_strncasecmp_l>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncat_ptr = _lookup<ffi.NativeFunction<_c_strncat>>('strncat');
  late final _dart_strncat _strncat = _strncat_ptr.asFunction<_dart_strncat>();

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp_ptr = _lookup<ffi.NativeFunction<_c_strncmp>>('strncmp');
  late final _dart_strncmp _strncmp = _strncmp_ptr.asFunction<_dart_strncmp>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpy_ptr = _lookup<ffi.NativeFunction<_c_strncpy>>('strncpy');
  late final _dart_strncpy _strncpy = _strncpy_ptr.asFunction<_dart_strncpy>();

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndup_ptr = _lookup<ffi.NativeFunction<_c_strndup>>('strndup');
  late final _dart_strndup _strndup = _strndup_ptr.asFunction<_dart_strndup>();

  int strnlen(
    ffi.Pointer<ffi.Int8> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlen_ptr = _lookup<ffi.NativeFunction<_c_strnlen>>('strnlen');
  late final _dart_strnlen _strnlen = _strnlen_ptr.asFunction<_dart_strnlen>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrk_ptr = _lookup<ffi.NativeFunction<_c_strpbrk>>('strpbrk');
  late final _dart_strpbrk _strpbrk = _strpbrk_ptr.asFunction<_dart_strpbrk>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchr_ptr = _lookup<ffi.NativeFunction<_c_strrchr>>('strrchr');
  late final _dart_strrchr _strrchr = _strrchr_ptr.asFunction<_dart_strrchr>();

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsep_ptr = _lookup<ffi.NativeFunction<_c_strsep>>('strsep');
  late final _dart_strsep _strsep = _strsep_ptr.asFunction<_dart_strsep>();

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignal_ptr =
      _lookup<ffi.NativeFunction<_c_strsignal>>('strsignal');
  late final _dart_strsignal _strsignal =
      _strsignal_ptr.asFunction<_dart_strsignal>();

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspn_ptr = _lookup<ffi.NativeFunction<_c_strspn>>('strspn');
  late final _dart_strspn _strspn = _strspn_ptr.asFunction<_dart_strspn>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __haystack,
    ffi.Pointer<ffi.Int8> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstr_ptr = _lookup<ffi.NativeFunction<_c_strstr>>('strstr');
  late final _dart_strstr _strstr = _strstr_ptr.asFunction<_dart_strstr>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtok_ptr = _lookup<ffi.NativeFunction<_c_strtok>>('strtok');
  late final _dart_strtok _strtok = _strtok_ptr.asFunction<_dart_strtok>();

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_r_ptr =
      _lookup<ffi.NativeFunction<_c_strtok_r>>('strtok_r');
  late final _dart_strtok_r _strtok_r =
      _strtok_r_ptr.asFunction<_dart_strtok_r>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrm_ptr = _lookup<ffi.NativeFunction<_c_strxfrm>>('strxfrm');
  late final _dart_strxfrm _strxfrm = _strxfrm_ptr.asFunction<_dart_strxfrm>();

  int strxfrm_l(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
    ffi.Pointer<__locale_struct> __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_l_ptr =
      _lookup<ffi.NativeFunction<_c_strxfrm_l>>('strxfrm_l');
  late final _dart_strxfrm_l _strxfrm_l =
      _strxfrm_l_ptr.asFunction<_dart_strxfrm_l>();
}

const int DISCORD_ACHIEVEMENT_MANAGER_VERSION = 1;

const int DISCORD_ACTIVITY_MANAGER_VERSION = 1;

const int DISCORD_APPLICATION_MANAGER_VERSION = 1;

const int DISCORD_IMAGE_MANAGER_VERSION = 1;

const int DISCORD_LOBBY_MANAGER_VERSION = 1;

const int DISCORD_NETWORK_MANAGER_VERSION = 1;

const int DISCORD_OVERLAY_MANAGER_VERSION = 1;

const int DISCORD_RELATIONSHIP_MANAGER_VERSION = 1;

const int DISCORD_STORAGE_MANAGER_VERSION = 1;

const int DISCORD_STORE_MANAGER_VERSION = 1;

const int DISCORD_USER_MANAGER_VERSION = 1;

const int DISCORD_VERSION = 2;

const int DISCORD_VOICE_MANAGER_VERSION = 1;

class DiscordActivity extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int64()
  external int application_id;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> name;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> state;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> details;

  external DiscordActivityTimestamps timestamps;

  external DiscordActivityAssets assets;

  external DiscordActivityParty party;

  external DiscordActivitySecrets secrets;

  @ffi.Uint8()
  external int instance;
}

class DiscordActivityAssets extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> large_image;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> large_text;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> small_image;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> small_text;
}

class DiscordActivityParty extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> id;

  external DiscordPartySize size;
}

class DiscordActivitySecrets extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> match;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> join;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> spectate;
}

class DiscordActivityTimestamps extends ffi.Struct {
  @ffi.Int64()
  external int start;

  @ffi.Int64()
  external int end;
}

class DiscordCreateParams extends ffi.Struct {
  @ffi.Int64()
  external int client_id;

  @ffi.Uint64()
  external int flags;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> events;

  external ffi.Pointer<ffi.Void> event_data;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> application_events;

  @ffi.Int32()
  external int application_version;

  external ffi.Pointer<IDiscordUserEvents> user_events;

  @ffi.Int32()
  external int user_version;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> image_events;

  @ffi.Int32()
  external int image_version;

  external ffi.Pointer<IDiscordActivityEvents> activity_events;

  @ffi.Int32()
  external int activity_version;

  external ffi.Pointer<IDiscordRelationshipEvents> relationship_events;

  @ffi.Int32()
  external int relationship_version;

  external ffi.Pointer<IDiscordLobbyEvents> lobby_events;

  @ffi.Int32()
  external int lobby_version;

  external ffi.Pointer<IDiscordNetworkEvents> network_events;

  @ffi.Int32()
  external int network_version;

  external ffi.Pointer<IDiscordOverlayEvents> overlay_events;

  @ffi.Int32()
  external int overlay_version;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> storage_events;

  @ffi.Int32()
  external int storage_version;

  external ffi.Pointer<IDiscordStoreEvents> store_events;

  @ffi.Int32()
  external int store_version;

  external ffi.Pointer<IDiscordVoiceEvents> voice_events;

  @ffi.Int32()
  external int voice_version;

  external ffi.Pointer<IDiscordAchievementEvents> achievement_events;

  @ffi.Int32()
  external int achievement_version;
}

class DiscordEntitlement extends ffi.Struct {
  @ffi.Int64()
  external int id;

  @ffi.Int32()
  external int type;

  @ffi.Int64()
  external int sku_id;
}

class DiscordFileStat extends ffi.Struct {
  @ffi.Array.multi([260])
  external ffi.Array<ffi.Int8> filename;

  @ffi.Uint64()
  external int size;

  @ffi.Uint64()
  external int last_modified;
}

class DiscordImageDimensions extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;
}

class DiscordImageHandle extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int64()
  external int id;

  @ffi.Uint32()
  external int size;
}

class DiscordInputMode extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> shortcut;
}

class DiscordLobby extends ffi.Struct {
  @ffi.Int64()
  external int id;

  @ffi.Int32()
  external int type;

  @ffi.Int64()
  external int owner_id;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> secret;

  @ffi.Uint32()
  external int capacity;

  @ffi.Uint8()
  external int locked;
}

class DiscordOAuth2Token extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> access_token;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> scopes;

  @ffi.Int64()
  external int expires;
}

class DiscordPartySize extends ffi.Struct {
  @ffi.Int32()
  external int current_size;

  @ffi.Int32()
  external int max_size;
}

class DiscordPresence extends ffi.Struct {
  @ffi.Int32()
  external int status;

  external DiscordActivity activity;
}

class DiscordRelationship extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external DiscordUser user;

  external DiscordPresence presence;
}

class DiscordSku extends ffi.Struct {
  @ffi.Int64()
  external int id;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> name;

  external DiscordSkuPrice price;
}

class DiscordSkuPrice extends ffi.Struct {
  @ffi.Uint32()
  external int amount;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> currency;
}

class DiscordUser extends ffi.Struct {
  @ffi.Int64()
  external int id;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> username;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> discriminator;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> avatar;

  @ffi.Uint8()
  external int bot;
}

class DiscordUserAchievement extends ffi.Struct {
  @ffi.Int64()
  external int user_id;

  @ffi.Int64()
  external int achievement_id;

  @ffi.Uint8()
  external int percent_complete;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> unlocked_at;
}

abstract class EDiscordActivityActionType {
  static const int DiscordActivityActionType_Join = 1;
  static const int DiscordActivityActionType_Spectate = 2;
}

abstract class EDiscordActivityJoinRequestReply {
  static const int DiscordActivityJoinRequestReply_No = 0;
  static const int DiscordActivityJoinRequestReply_Yes = 1;
  static const int DiscordActivityJoinRequestReply_Ignore = 2;
}

abstract class EDiscordActivityType {
  static const int DiscordActivityType_Playing = 0;
  static const int DiscordActivityType_Streaming = 1;
  static const int DiscordActivityType_Listening = 2;
  static const int DiscordActivityType_Watching = 3;
}

abstract class EDiscordCreateFlags {
  static const int DiscordCreateFlags_Default = 0;
  static const int DiscordCreateFlags_NoRequireDiscord = 1;
}

abstract class EDiscordEntitlementType {
  static const int DiscordEntitlementType_Purchase = 1;
  static const int DiscordEntitlementType_PremiumSubscription = 2;
  static const int DiscordEntitlementType_DeveloperGift = 3;
  static const int DiscordEntitlementType_TestModePurchase = 4;
  static const int DiscordEntitlementType_FreePurchase = 5;
  static const int DiscordEntitlementType_UserGift = 6;
  static const int DiscordEntitlementType_PremiumPurchase = 7;
}

abstract class EDiscordImageType {
  static const int DiscordImageType_User = 0;
}

abstract class EDiscordInputModeType {
  static const int DiscordInputModeType_VoiceActivity = 0;
  static const int DiscordInputModeType_PushToTalk = 1;
}

abstract class EDiscordLobbySearchCast {
  static const int DiscordLobbySearchCast_String = 1;
  static const int DiscordLobbySearchCast_Number = 2;
}

abstract class EDiscordLobbySearchComparison {
  static const int DiscordLobbySearchComparison_LessThanOrEqual = -2;
  static const int DiscordLobbySearchComparison_LessThan = -1;
  static const int DiscordLobbySearchComparison_Equal = 0;
  static const int DiscordLobbySearchComparison_GreaterThan = 1;
  static const int DiscordLobbySearchComparison_GreaterThanOrEqual = 2;
  static const int DiscordLobbySearchComparison_NotEqual = 3;
}

abstract class EDiscordLobbySearchDistance {
  static const int DiscordLobbySearchDistance_Local = 0;
  static const int DiscordLobbySearchDistance_Default = 1;
  static const int DiscordLobbySearchDistance_Extended = 2;
  static const int DiscordLobbySearchDistance_Global = 3;
}

abstract class EDiscordLobbyType {
  static const int DiscordLobbyType_Private = 1;
  static const int DiscordLobbyType_Public = 2;
}

abstract class EDiscordLogLevel {
  static const int DiscordLogLevel_Error = 1;
  static const int DiscordLogLevel_Warn = 2;
  static const int DiscordLogLevel_Info = 3;
  static const int DiscordLogLevel_Debug = 4;
}

abstract class EDiscordPremiumType {
  static const int DiscordPremiumType_None = 0;
  static const int DiscordPremiumType_Tier1 = 1;
  static const int DiscordPremiumType_Tier2 = 2;
}

abstract class EDiscordRelationshipType {
  static const int DiscordRelationshipType_None = 0;
  static const int DiscordRelationshipType_Friend = 1;
  static const int DiscordRelationshipType_Blocked = 2;
  static const int DiscordRelationshipType_PendingIncoming = 3;
  static const int DiscordRelationshipType_PendingOutgoing = 4;
  static const int DiscordRelationshipType_Implicit = 5;
}

abstract class EDiscordResult {
  static const int DiscordResult_Ok = 0;
  static const int DiscordResult_ServiceUnavailable = 1;
  static const int DiscordResult_InvalidVersion = 2;
  static const int DiscordResult_LockFailed = 3;
  static const int DiscordResult_InternalError = 4;
  static const int DiscordResult_InvalidPayload = 5;
  static const int DiscordResult_InvalidCommand = 6;
  static const int DiscordResult_InvalidPermissions = 7;
  static const int DiscordResult_NotFetched = 8;
  static const int DiscordResult_NotFound = 9;
  static const int DiscordResult_Conflict = 10;
  static const int DiscordResult_InvalidSecret = 11;
  static const int DiscordResult_InvalidJoinSecret = 12;
  static const int DiscordResult_NoEligibleActivity = 13;
  static const int DiscordResult_InvalidInvite = 14;
  static const int DiscordResult_NotAuthenticated = 15;
  static const int DiscordResult_InvalidAccessToken = 16;
  static const int DiscordResult_ApplicationMismatch = 17;
  static const int DiscordResult_InvalidDataUrl = 18;
  static const int DiscordResult_InvalidBase64 = 19;
  static const int DiscordResult_NotFiltered = 20;
  static const int DiscordResult_LobbyFull = 21;
  static const int DiscordResult_InvalidLobbySecret = 22;
  static const int DiscordResult_InvalidFilename = 23;
  static const int DiscordResult_InvalidFileSize = 24;
  static const int DiscordResult_InvalidEntitlement = 25;
  static const int DiscordResult_NotInstalled = 26;
  static const int DiscordResult_NotRunning = 27;
  static const int DiscordResult_InsufficientBuffer = 28;
  static const int DiscordResult_PurchaseCanceled = 29;
  static const int DiscordResult_InvalidGuild = 30;
  static const int DiscordResult_InvalidEvent = 31;
  static const int DiscordResult_InvalidChannel = 32;
  static const int DiscordResult_InvalidOrigin = 33;
  static const int DiscordResult_RateLimited = 34;
  static const int DiscordResult_OAuth2Error = 35;
  static const int DiscordResult_SelectChannelTimeout = 36;
  static const int DiscordResult_GetGuildTimeout = 37;
  static const int DiscordResult_SelectVoiceForceRequired = 38;
  static const int DiscordResult_CaptureShortcutAlreadyListening = 39;
  static const int DiscordResult_UnauthorizedForAchievement = 40;
  static const int DiscordResult_InvalidGiftCode = 41;
  static const int DiscordResult_PurchaseError = 42;
  static const int DiscordResult_TransactionAborted = 43;
}

abstract class EDiscordSkuType {
  static const int DiscordSkuType_Application = 1;
  static const int DiscordSkuType_DLC = 2;
  static const int DiscordSkuType_Consumable = 3;
  static const int DiscordSkuType_Bundle = 4;
}

abstract class EDiscordStatus {
  static const int DiscordStatus_Offline = 0;
  static const int DiscordStatus_Online = 1;
  static const int DiscordStatus_Idle = 2;
  static const int DiscordStatus_DoNotDisturb = 3;
}

abstract class EDiscordUserFlag {
  static const int DiscordUserFlag_Partner = 2;
  static const int DiscordUserFlag_HypeSquadEvents = 4;
  static const int DiscordUserFlag_HypeSquadHouse1 = 64;
  static const int DiscordUserFlag_HypeSquadHouse2 = 128;
  static const int DiscordUserFlag_HypeSquadHouse3 = 256;
}

class IDiscordAchievementEvents extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_168>>
      on_user_achievement_update;
}

class IDiscordAchievementManager extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_170>> set_user_achievement;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_172>>
      fetch_user_achievements;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_173>>
      count_user_achievements;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_174>> get_user_achievement;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_175>>
      get_user_achievement_at;
}

class IDiscordActivityEvents extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_31>> on_activity_join;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_32>> on_activity_spectate;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_33>>
      on_activity_join_request;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_34>> on_activity_invite;
}

class IDiscordActivityManager extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_35>> register_command;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_36>> register_steam;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_38>> update_activity;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_40>> clear_activity;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_42>> send_request_reply;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_44>> send_invite;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_46>> accept_invite;
}

class IDiscordApplicationManager extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_14>> validate_or_exit;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_15>> get_current_locale;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_16>> get_current_branch;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_18>> get_oauth2_token;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_20>> get_ticket;
}

class IDiscordCore extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_176>> destroy;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_177>> run_callbacks;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_179>> set_log_hook;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_180>>
      get_application_manager;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_181>> get_user_manager;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_182>> get_image_manager;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_183>> get_activity_manager;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_184>>
      get_relationship_manager;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_185>> get_lobby_manager;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_186>> get_network_manager;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_187>> get_overlay_manager;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_188>> get_storage_manager;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_189>> get_store_manager;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_190>> get_voice_manager;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_191>>
      get_achievement_manager;
}

class IDiscordImageManager extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_28>> fetch;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_29>> get_dimensions;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_30>> get_data;
}

class IDiscordLobbyEvents extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_54>> on_lobby_update;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_55>> on_lobby_delete;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_56>> on_member_connect;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_57>> on_member_update;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_58>> on_member_disconnect;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_59>> on_lobby_message;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_60>> on_speaking;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_61>> on_network_message;
}

class IDiscordLobbyManager extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_62>>
      get_lobby_create_transaction;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_63>>
      get_lobby_update_transaction;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_64>>
      get_member_update_transaction;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_66>> create_lobby;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_68>> update_lobby;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_70>> delete_lobby;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_72>> connect_lobby;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_74>>
      connect_lobby_with_activity_secret;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_76>> disconnect_lobby;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_77>> get_lobby;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_78>>
      get_lobby_activity_secret;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_79>>
      get_lobby_metadata_value;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_80>> get_lobby_metadata_key;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_81>> lobby_metadata_count;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_82>> member_count;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_83>> get_member_user_id;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_84>> get_member_user;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_85>>
      get_member_metadata_value;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_86>>
      get_member_metadata_key;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_87>> member_metadata_count;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_89>> update_member;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_91>> send_lobby_message;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_92>> get_search_query;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_94>> search;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_95>> lobby_count;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_96>> get_lobby_id;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_98>> connect_voice;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_100>> disconnect_voice;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_101>> connect_network;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_102>> disconnect_network;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_103>> flush_network;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_104>> open_network_channel;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_105>> send_network_message;
}

class IDiscordLobbyMemberTransaction extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_7>> set_metadata;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_8>> delete_metadata;
}

class IDiscordLobbySearchQuery extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_9>> filter;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_10>> sort;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_11>> limit;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_12>> distance;
}

class IDiscordLobbyTransaction extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> set_type;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_2>> set_owner;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> set_capacity;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_4>> set_metadata;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_5>> delete_metadata;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_6>> set_locked;
}

class IDiscordNetworkEvents extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_106>> on_message;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_107>> on_route_update;
}

class IDiscordNetworkManager extends ffi.Struct {
  /// Get the local peer ID for this process.
  external ffi.Pointer<ffi.NativeFunction<_typedefC_108>> get_peer_id;

  /// Send pending network messages.
  external ffi.Pointer<ffi.NativeFunction<_typedefC_109>> flush;

  /// Open a connection to a remote peer.
  external ffi.Pointer<ffi.NativeFunction<_typedefC_110>> open_peer;

  /// Update the route data for a connected peer.
  external ffi.Pointer<ffi.NativeFunction<_typedefC_111>> update_peer;

  /// Close the connection to a remote peer.
  external ffi.Pointer<ffi.NativeFunction<_typedefC_112>> close_peer;

  /// Open a message channel to a connected peer.
  external ffi.Pointer<ffi.NativeFunction<_typedefC_113>> open_channel;

  /// Close a message channel to a connected peer.
  external ffi.Pointer<ffi.NativeFunction<_typedefC_114>> close_channel;

  /// Send a message to a connected peer over an opened message channel.
  external ffi.Pointer<ffi.NativeFunction<_typedefC_115>> send_message;
}

class IDiscordOverlayEvents extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_116>> on_toggle;
}

class IDiscordOverlayManager extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_117>> is_enabled;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_118>> is_locked;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_120>> set_locked;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_122>> open_activity_invite;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_124>> open_guild_invite;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_126>> open_voice_settings;
}

class IDiscordRelationshipEvents extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_47>> on_refresh;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_48>> on_relationship_update;
}

class IDiscordRelationshipManager extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_50>> filter;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_51>> count;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_52>> get_1;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_53>> get_at;
}

class IDiscordStorageManager extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_127>> read;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_129>> read_async;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_131>> read_async_partial;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_132>> write;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_134>> write_async;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_135>> delete_;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_136>> exists;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_137>> count;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_138>> stat;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_139>> stat_at;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_140>> get_path;
}

class IDiscordStoreEvents extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_141>> on_entitlement_create;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_142>> on_entitlement_delete;
}

class IDiscordStoreManager extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_144>> fetch_skus;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_145>> count_skus;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_146>> get_sku;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_147>> get_sku_at;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_149>> fetch_entitlements;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_150>> count_entitlements;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_151>> get_entitlement;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_152>> get_entitlement_at;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_153>> has_sku_entitlement;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_155>> start_purchase;
}

class IDiscordUserEvents extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_21>> on_current_user_update;
}

class IDiscordUserManager extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_22>> get_current_user;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_24>> get_user;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_25>>
      get_current_user_premium_type;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_26>> current_user_has_flag;
}

class IDiscordVoiceEvents extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_156>> on_settings_update;
}

class IDiscordVoiceManager extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_157>> get_input_mode;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_159>> set_input_mode;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_160>> is_self_mute;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_161>> set_self_mute;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_162>> is_self_deaf;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_163>> set_self_deaf;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_164>> is_local_mute;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_165>> set_local_mute;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_166>> get_local_volume;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_167>> set_local_volume;
}

const int INT16_MAX = 32767;

const int INT16_MIN = -32768;

const int INT32_MAX = 2147483647;

const int INT32_MIN = -2147483648;

const int INT64_MAX = 9223372036854775807;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT8_MIN = -128;

const int INTMAX_MAX = 9223372036854775807;

const int INTMAX_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MAX = 9223372036854775807;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST8_MIN = -128;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MAX = 9223372036854775807;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST8_MIN = -128;

const int NULL = 0;

const int PTRDIFF_MAX = 9223372036854775807;

const int PTRDIFF_MIN = -9223372036854775808;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIZE_MAX = -1;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int UINT8_MAX = 255;

const int UINTMAX_MAX = -1;

const int UINTPTR_MAX = -1;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int UINT_FAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int UINT_LEAST8_MAX = 255;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MAX = 4294967295;

const int WINT_MIN = 0;

const int _ATFILE_SOURCE = 1;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_TIME64_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _BITS_WCHAR_H = 1;

const int _DEFAULT_SOURCE = 1;

const int _FEATURES_H = 1;

const int _POSIX_C_SOURCE = 200809;

const int _POSIX_SOURCE = 1;

const int _STDC_PREDEF_H = 1;

const int _STDINT_H = 1;

const int _STRINGS_H = 1;

const int _STRING_H = 1;

const int _SYS_CDEFS_H = 1;

const int __FD_SETSIZE = 1024;

const int __GLIBC_MINOR__ = 34;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC__ = 2;

const int __GNU_LIBRARY__ = 6;

const int __HAVE_GENERIC_SELECTION = 0;

const int __INO_T_MATCHES_INO64_T = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __SYSCALL_WORDSIZE = 64;

const int __THROW = 1;

const int __THROWNL = 1;

const int __TIMESIZE = 64;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __USE_ISOC11 = 1;

const int __USE_ISOC95 = 1;

const int __USE_ISOC99 = 1;

const int __USE_MISC = 1;

const int __USE_POSIX = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_POSIX2 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

const int __glibc_c99_flexarr_available = 1;

class __locale_data extends ffi.Opaque {}

class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.Uint16> __ctype_b;

  external ffi.Pointer<ffi.Int32> __ctype_tolower;

  external ffi.Pointer<ffi.Int32> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Int8>> __names;
}

const int false_1 = 0;

const int true_1 = 1;

typedef _c_DiscordCreate = ffi.Int32 Function(
  ffi.Int32 version,
  ffi.Pointer<DiscordCreateParams> params,
  ffi.Pointer<ffi.Pointer<IDiscordCore>> result,
);

typedef _dart_DiscordCreate = int Function(
  int version,
  ffi.Pointer<DiscordCreateParams> params,
  ffi.Pointer<ffi.Pointer<IDiscordCore>> result,
);

typedef _c_DiscordCreateParamsSetDefault = ffi.Void Function(
  ffi.Pointer<DiscordCreateParams> params,
);

typedef _dart_DiscordCreateParamsSetDefault = void Function(
  ffi.Pointer<DiscordCreateParams> params,
);

typedef _c___stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart___stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c___stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart___stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c___strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _dart___strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _c_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Uint64 __n,
);

typedef _dart_bcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_bcopy = ffi.Void Function(
  ffi.Pointer<ffi.Void> __src,
  ffi.Pointer<ffi.Void> __dest,
  ffi.Uint64 __n,
);

typedef _dart_bcopy = void Function(
  ffi.Pointer<ffi.Void> __src,
  ffi.Pointer<ffi.Void> __dest,
  int __n,
);

typedef _c_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __n,
);

typedef _dart_bzero = void Function(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

typedef _c_explicit_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __n,
);

typedef _dart_explicit_bzero = void Function(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

typedef _c_ffs = ffi.Int32 Function(
  ffi.Int32 __i,
);

typedef _dart_ffs = int Function(
  int __i,
);

typedef _c_ffsl = ffi.Int32 Function(
  ffi.Int64 __l,
);

typedef _dart_ffsl = int Function(
  int __l,
);

typedef _c_ffsll = ffi.Int32 Function(
  ffi.Int64 __ll,
);

typedef _dart_ffsll = int Function(
  int __ll,
);

typedef _c_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __c,
  int __n,
);

typedef _c_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Uint64 __n,
);

typedef _dart_memcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __n,
);

typedef _dart_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __n,
);

typedef _dart_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strcasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcasecmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strcasecmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_strcasecmp_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcoll = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strcoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_strcoll_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strcspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __reject,
);

typedef _dart_strcspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __reject,
);

typedef _c_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
);

typedef _dart_strerror = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
);

typedef _c_strerror_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_strerror_l = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_strerror_r = ffi.Int32 Function(
  ffi.Int32 __errnum,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __buflen,
);

typedef _dart_strerror_r = int Function(
  int __errnum,
  ffi.Pointer<ffi.Int8> __buf,
  int __buflen,
);

typedef _c_strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strlen = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strncasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncasecmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strncasecmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_strncasecmp_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __string,
  ffi.Uint64 __n,
);

typedef _dart_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __string,
  int __n,
);

typedef _c_strnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __string,
  ffi.Uint64 __maxlen,
);

typedef _dart_strnlen = int Function(
  ffi.Pointer<ffi.Int8> __string,
  int __maxlen,
);

typedef _c_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _dart_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _c_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c_strsignal = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __sig,
);

typedef _dart_strsignal = ffi.Pointer<ffi.Int8> Function(
  int __sig,
);

typedef _c_strspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _dart_strspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _c_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __haystack,
  ffi.Pointer<ffi.Int8> __needle,
);

typedef _dart_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __haystack,
  ffi.Pointer<ffi.Int8> __needle,
);

typedef _c_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _dart_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _c_strxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strxfrm = int Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strxfrm_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_strxfrm_l = int Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
  ffi.Pointer<__locale_struct> __l,
);

typedef _typedefC_168 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<DiscordUserAchievement>,
);

typedef _typedefC_169 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_170 = ffi.Void Function(
  ffi.Pointer<IDiscordAchievementManager>,
  ffi.Int64,
  ffi.Uint8,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_169>>,
);

typedef _typedefC_171 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_172 = ffi.Void Function(
  ffi.Pointer<IDiscordAchievementManager>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_171>>,
);

typedef _typedefC_173 = ffi.Void Function(
  ffi.Pointer<IDiscordAchievementManager>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_174 = ffi.Int32 Function(
  ffi.Pointer<IDiscordAchievementManager>,
  ffi.Int64,
  ffi.Pointer<DiscordUserAchievement>,
);

typedef _typedefC_175 = ffi.Int32 Function(
  ffi.Pointer<IDiscordAchievementManager>,
  ffi.Int32,
  ffi.Pointer<DiscordUserAchievement>,
);

typedef _typedefC_31 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_32 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_33 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<DiscordUser>,
);

typedef _typedefC_34 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Pointer<DiscordUser>,
  ffi.Pointer<DiscordActivity>,
);

typedef _typedefC_35 = ffi.Int32 Function(
  ffi.Pointer<IDiscordActivityManager>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_36 = ffi.Int32 Function(
  ffi.Pointer<IDiscordActivityManager>,
  ffi.Uint32,
);

typedef _typedefC_37 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_38 = ffi.Void Function(
  ffi.Pointer<IDiscordActivityManager>,
  ffi.Pointer<DiscordActivity>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_37>>,
);

typedef _typedefC_39 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_40 = ffi.Void Function(
  ffi.Pointer<IDiscordActivityManager>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_39>>,
);

typedef _typedefC_41 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_42 = ffi.Void Function(
  ffi.Pointer<IDiscordActivityManager>,
  ffi.Int64,
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_41>>,
);

typedef _typedefC_43 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_44 = ffi.Void Function(
  ffi.Pointer<IDiscordActivityManager>,
  ffi.Int64,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_43>>,
);

typedef _typedefC_45 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_46 = ffi.Void Function(
  ffi.Pointer<IDiscordActivityManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_45>>,
);

typedef _typedefC_13 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_14 = ffi.Void Function(
  ffi.Pointer<IDiscordApplicationManager>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>>,
);

typedef _typedefC_15 = ffi.Void Function(
  ffi.Pointer<IDiscordApplicationManager>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef _typedefC_16 = ffi.Void Function(
  ffi.Pointer<IDiscordApplicationManager>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef _typedefC_17 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Pointer<DiscordOAuth2Token>,
);

typedef _typedefC_18 = ffi.Void Function(
  ffi.Pointer<IDiscordApplicationManager>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_17>>,
);

typedef _typedefC_19 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_20 = ffi.Void Function(
  ffi.Pointer<IDiscordApplicationManager>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_19>>,
);

typedef _typedefC_176 = ffi.Void Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_177 = ffi.Int32 Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_178 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_179 = ffi.Void Function(
  ffi.Pointer<IDiscordCore>,
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_178>>,
);

typedef _typedefC_180 = ffi.Pointer<IDiscordApplicationManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_181 = ffi.Pointer<IDiscordUserManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_182 = ffi.Pointer<IDiscordImageManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_183 = ffi.Pointer<IDiscordActivityManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_184 = ffi.Pointer<IDiscordRelationshipManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_185 = ffi.Pointer<IDiscordLobbyManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_186 = ffi.Pointer<IDiscordNetworkManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_187 = ffi.Pointer<IDiscordOverlayManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_188 = ffi.Pointer<IDiscordStorageManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_189 = ffi.Pointer<IDiscordStoreManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_190 = ffi.Pointer<IDiscordVoiceManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_191 = ffi.Pointer<IDiscordAchievementManager> Function(
  ffi.Pointer<IDiscordCore>,
);

typedef _typedefC_27 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  DiscordImageHandle,
);

typedef _typedefC_28 = ffi.Void Function(
  ffi.Pointer<IDiscordImageManager>,
  DiscordImageHandle,
  ffi.Uint8,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_27>>,
);

typedef _typedefC_29 = ffi.Int32 Function(
  ffi.Pointer<IDiscordImageManager>,
  DiscordImageHandle,
  ffi.Pointer<DiscordImageDimensions>,
);

typedef _typedefC_30 = ffi.Int32 Function(
  ffi.Pointer<IDiscordImageManager>,
  DiscordImageHandle,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
);

typedef _typedefC_54 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
);

typedef _typedefC_55 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Uint32,
);

typedef _typedefC_56 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int64,
);

typedef _typedefC_57 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int64,
);

typedef _typedefC_58 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int64,
);

typedef _typedefC_59 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int64,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
);

typedef _typedefC_60 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int64,
  ffi.Uint8,
);

typedef _typedefC_61 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int64,
  ffi.Uint8,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
);

typedef _typedefC_62 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Pointer<ffi.Pointer<IDiscordLobbyTransaction>>,
);

typedef _typedefC_63 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Pointer<IDiscordLobbyTransaction>>,
);

typedef _typedefC_64 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Int64,
  ffi.Pointer<ffi.Pointer<IDiscordLobbyMemberTransaction>>,
);

typedef _typedefC_65 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Pointer<DiscordLobby>,
);

typedef _typedefC_66 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Pointer<IDiscordLobbyTransaction>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_65>>,
);

typedef _typedefC_67 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_68 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<IDiscordLobbyTransaction>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_67>>,
);

typedef _typedefC_69 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_70 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_69>>,
);

typedef _typedefC_71 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Pointer<DiscordLobby>,
);

typedef _typedefC_72 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_71>>,
);

typedef _typedefC_73 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Pointer<DiscordLobby>,
);

typedef _typedefC_74 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_73>>,
);

typedef _typedefC_75 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_76 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_75>>,
);

typedef _typedefC_77 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<DiscordLobby>,
);

typedef _typedefC_78 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef _typedefC_79 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef _typedefC_80 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Int32,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef _typedefC_81 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_82 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_83 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Int32,
  ffi.Pointer<ffi.Int64>,
);

typedef _typedefC_84 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Int64,
  ffi.Pointer<DiscordUser>,
);

typedef _typedefC_85 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Int64,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef _typedefC_86 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Int64,
  ffi.Int32,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef _typedefC_87 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Int64,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_88 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_89 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Int64,
  ffi.Pointer<IDiscordLobbyMemberTransaction>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_88>>,
);

typedef _typedefC_90 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_91 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_90>>,
);

typedef _typedefC_92 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Pointer<ffi.Pointer<IDiscordLobbySearchQuery>>,
);

typedef _typedefC_93 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_94 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Pointer<IDiscordLobbySearchQuery>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_93>>,
);

typedef _typedefC_95 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_96 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int32,
  ffi.Pointer<ffi.Int64>,
);

typedef _typedefC_97 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_98 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_97>>,
);

typedef _typedefC_99 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_100 = ffi.Void Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_99>>,
);

typedef _typedefC_101 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
);

typedef _typedefC_102 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
);

typedef _typedefC_103 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
);

typedef _typedefC_104 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Uint8,
  ffi.Uint8,
);

typedef _typedefC_105 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyManager>,
  ffi.Int64,
  ffi.Int64,
  ffi.Uint8,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
);

typedef _typedefC_7 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyMemberTransaction>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_8 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyMemberTransaction>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_9 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbySearchQuery>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_10 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbySearchQuery>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbySearchQuery>,
  ffi.Uint32,
);

typedef _typedefC_12 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbySearchQuery>,
  ffi.Int32,
);

typedef _typedefC_1 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyTransaction>,
  ffi.Int32,
);

typedef _typedefC_2 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyTransaction>,
  ffi.Int64,
);

typedef _typedefC_3 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyTransaction>,
  ffi.Uint32,
);

typedef _typedefC_4 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyTransaction>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_5 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyTransaction>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_6 = ffi.Int32 Function(
  ffi.Pointer<IDiscordLobbyTransaction>,
  ffi.Uint8,
);

typedef _typedefC_106 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Uint8,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
);

typedef _typedefC_107 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_108 = ffi.Void Function(
  ffi.Pointer<IDiscordNetworkManager>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_109 = ffi.Int32 Function(
  ffi.Pointer<IDiscordNetworkManager>,
);

typedef _typedefC_110 = ffi.Int32 Function(
  ffi.Pointer<IDiscordNetworkManager>,
  ffi.Uint64,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_111 = ffi.Int32 Function(
  ffi.Pointer<IDiscordNetworkManager>,
  ffi.Uint64,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_112 = ffi.Int32 Function(
  ffi.Pointer<IDiscordNetworkManager>,
  ffi.Uint64,
);

typedef _typedefC_113 = ffi.Int32 Function(
  ffi.Pointer<IDiscordNetworkManager>,
  ffi.Uint64,
  ffi.Uint8,
  ffi.Uint8,
);

typedef _typedefC_114 = ffi.Int32 Function(
  ffi.Pointer<IDiscordNetworkManager>,
  ffi.Uint64,
  ffi.Uint8,
);

typedef _typedefC_115 = ffi.Int32 Function(
  ffi.Pointer<IDiscordNetworkManager>,
  ffi.Uint64,
  ffi.Uint8,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
);

typedef _typedefC_116 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint8,
);

typedef _typedefC_117 = ffi.Void Function(
  ffi.Pointer<IDiscordOverlayManager>,
  ffi.Pointer<ffi.Uint8>,
);

typedef _typedefC_118 = ffi.Void Function(
  ffi.Pointer<IDiscordOverlayManager>,
  ffi.Pointer<ffi.Uint8>,
);

typedef _typedefC_119 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_120 = ffi.Void Function(
  ffi.Pointer<IDiscordOverlayManager>,
  ffi.Uint8,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_119>>,
);

typedef _typedefC_121 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_122 = ffi.Void Function(
  ffi.Pointer<IDiscordOverlayManager>,
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_121>>,
);

typedef _typedefC_123 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_124 = ffi.Void Function(
  ffi.Pointer<IDiscordOverlayManager>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_123>>,
);

typedef _typedefC_125 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_126 = ffi.Void Function(
  ffi.Pointer<IDiscordOverlayManager>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_125>>,
);

typedef _typedefC_47 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_48 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<DiscordRelationship>,
);

typedef _typedefC_49 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<DiscordRelationship>,
);

typedef _typedefC_50 = ffi.Void Function(
  ffi.Pointer<IDiscordRelationshipManager>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_49>>,
);

typedef _typedefC_51 = ffi.Int32 Function(
  ffi.Pointer<IDiscordRelationshipManager>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_52 = ffi.Int32 Function(
  ffi.Pointer<IDiscordRelationshipManager>,
  ffi.Int64,
  ffi.Pointer<DiscordRelationship>,
);

typedef _typedefC_53 = ffi.Int32 Function(
  ffi.Pointer<IDiscordRelationshipManager>,
  ffi.Uint32,
  ffi.Pointer<DiscordRelationship>,
);

typedef _typedefC_127 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStorageManager>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
  ffi.Pointer<ffi.Uint32>,
);

typedef _typedefC_128 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
);

typedef _typedefC_129 = ffi.Void Function(
  ffi.Pointer<IDiscordStorageManager>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_128>>,
);

typedef _typedefC_130 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
);

typedef _typedefC_131 = ffi.Void Function(
  ffi.Pointer<IDiscordStorageManager>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_130>>,
);

typedef _typedefC_132 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStorageManager>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
);

typedef _typedefC_133 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_134 = ffi.Void Function(
  ffi.Pointer<IDiscordStorageManager>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_133>>,
);

typedef _typedefC_135 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStorageManager>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_136 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStorageManager>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Uint8>,
);

typedef _typedefC_137 = ffi.Void Function(
  ffi.Pointer<IDiscordStorageManager>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_138 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStorageManager>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<DiscordFileStat>,
);

typedef _typedefC_139 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStorageManager>,
  ffi.Int32,
  ffi.Pointer<DiscordFileStat>,
);

typedef _typedefC_140 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStorageManager>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef _typedefC_141 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<DiscordEntitlement>,
);

typedef _typedefC_142 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<DiscordEntitlement>,
);

typedef _typedefC_143 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_144 = ffi.Void Function(
  ffi.Pointer<IDiscordStoreManager>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_143>>,
);

typedef _typedefC_145 = ffi.Void Function(
  ffi.Pointer<IDiscordStoreManager>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_146 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStoreManager>,
  ffi.Int64,
  ffi.Pointer<DiscordSku>,
);

typedef _typedefC_147 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStoreManager>,
  ffi.Int32,
  ffi.Pointer<DiscordSku>,
);

typedef _typedefC_148 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_149 = ffi.Void Function(
  ffi.Pointer<IDiscordStoreManager>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_148>>,
);

typedef _typedefC_150 = ffi.Void Function(
  ffi.Pointer<IDiscordStoreManager>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_151 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStoreManager>,
  ffi.Int64,
  ffi.Pointer<DiscordEntitlement>,
);

typedef _typedefC_152 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStoreManager>,
  ffi.Int32,
  ffi.Pointer<DiscordEntitlement>,
);

typedef _typedefC_153 = ffi.Int32 Function(
  ffi.Pointer<IDiscordStoreManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Uint8>,
);

typedef _typedefC_154 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_155 = ffi.Void Function(
  ffi.Pointer<IDiscordStoreManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_154>>,
);

typedef _typedefC_21 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_22 = ffi.Int32 Function(
  ffi.Pointer<IDiscordUserManager>,
  ffi.Pointer<DiscordUser>,
);

typedef _typedefC_23 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Pointer<DiscordUser>,
);

typedef _typedefC_24 = ffi.Void Function(
  ffi.Pointer<IDiscordUserManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_23>>,
);

typedef _typedefC_25 = ffi.Int32 Function(
  ffi.Pointer<IDiscordUserManager>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_26 = ffi.Int32 Function(
  ffi.Pointer<IDiscordUserManager>,
  ffi.Int32,
  ffi.Pointer<ffi.Uint8>,
);

typedef _typedefC_156 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_157 = ffi.Int32 Function(
  ffi.Pointer<IDiscordVoiceManager>,
  ffi.Pointer<DiscordInputMode>,
);

typedef _typedefC_158 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_159 = ffi.Void Function(
  ffi.Pointer<IDiscordVoiceManager>,
  DiscordInputMode,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_158>>,
);

typedef _typedefC_160 = ffi.Int32 Function(
  ffi.Pointer<IDiscordVoiceManager>,
  ffi.Pointer<ffi.Uint8>,
);

typedef _typedefC_161 = ffi.Int32 Function(
  ffi.Pointer<IDiscordVoiceManager>,
  ffi.Uint8,
);

typedef _typedefC_162 = ffi.Int32 Function(
  ffi.Pointer<IDiscordVoiceManager>,
  ffi.Pointer<ffi.Uint8>,
);

typedef _typedefC_163 = ffi.Int32 Function(
  ffi.Pointer<IDiscordVoiceManager>,
  ffi.Uint8,
);

typedef _typedefC_164 = ffi.Int32 Function(
  ffi.Pointer<IDiscordVoiceManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Uint8>,
);

typedef _typedefC_165 = ffi.Int32 Function(
  ffi.Pointer<IDiscordVoiceManager>,
  ffi.Int64,
  ffi.Uint8,
);

typedef _typedefC_166 = ffi.Int32 Function(
  ffi.Pointer<IDiscordVoiceManager>,
  ffi.Int64,
  ffi.Pointer<ffi.Uint8>,
);

typedef _typedefC_167 = ffi.Int32 Function(
  ffi.Pointer<IDiscordVoiceManager>,
  ffi.Int64,
  ffi.Uint8,
);
